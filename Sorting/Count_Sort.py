# 계수 정렬 알고리즘
# 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠른 정렬 알고리즘
# 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때만 사용할 수 있음
# 일반적으로 가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 때 효과적
# 계수 정렬은 모든 범위를 담을 수 있는 크기의 리스트를 선언해야 하기 때문
# 가장 큰 데이터와 작은 데이터의 차이가 1,000,000이라면 1,000,001개의 데이터를 담을 수 있는 리스트 초기화
# 계수 정렬은 앞서 다루었던 3가지 정렬 알고리즘처럼 직접 데이터의 값을 비교한 뒤에
# 위치를 변경하며 정렬하는 방식(비교 기반의 정렬 알고리즘)이 아님

# 모든 원소의 값이 0보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
# 모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화)
count = [0] * (max(array) + 1)

for i in range(len(array)):
    count[array[i]] += 1    # 각 데이터에 해당하는 인덱스의 값 증가
# [2, 2, 2, 1, 1, 2, 1, 1, 1, 2]

for i in range(len(count)):     # 리스트에 기록된 정렬 정보 확인
    for j in range(count[i]):
        print(i, end=' ')       # 띄어쓰기 구분으로 등장한 횟수만큼 인덱스 출력, i를 j번 출력


# 계수 정렬의 공간 복잡도
# 때에 따라서 심각한 비효율성 초래
# 데이터가 [0, 999,999] 단 두개만 있더라도 리스트의 크기가 100만 개가 되도록 선언
# 따라서 항상 사용할 수 있는 정렬 알고리즘은 아니며
# 동일한 값을 가지는 데이터가 여러 개 등장할 때 적합

# 퀵 정렬은 일반적인 경우에서 평균적으로 빠르기 때문에
# 데이터의 특성을 파악하기 어렵다면 퀵 정렬 이용하는 것이 유리